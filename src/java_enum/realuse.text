üöÄ Real-World Use Case: Job Type Enum in a Job Portal API
1Ô∏è‚É£ Define JobType Enum (with metadata)
java
Copy
Edit
public enum JobType {
    FULL_TIME("Full Time", 8),
    PART_TIME("Part Time", 4),
    FREELANCE("Freelance", 0);

    private final String label;
    private final int defaultHours;

    JobType(String label, int defaultHours) {
        this.label = label;
        this.defaultHours = defaultHours;
    }

    public String getLabel() {
        return label;
    }

    public int getDefaultHours() {
        return defaultHours;
    }
}
2Ô∏è‚É£ Use It in Your Entity / DTO
java
public class JobDto {
    private String title;
    private JobType jobType; // ‚ú® Enum used directly
}
Now your incoming JSON looks like:


{
  "title": "Spring Boot Developer",
  "jobType": "PART_TIME"
}
And in the response, you can transform this to:

json

{
  "title": "Spring Boot Developer",
  "jobType": "PART_TIME",
  "label": "Part Time",
  "defaultHours": 4
}
3Ô∏è‚É£ üí• Safely Convert String to Enum (with fallback)
Let‚Äôs say user sends "part_time" or "Part-Time" by mistake ‚Äî you need to handle that gracefully.

java
public static JobType fromString(String value) {
    return Arrays.stream(JobType.values())
        .filter(j -> j.name().equalsIgnoreCase(value.replace("-", "_")))
        .findFirst()
        .orElse(JobType.FREELANCE); // fallback
}
4Ô∏è‚É£ üß© Use Enum in Spring Boot API
‚úÖ As @RequestParam:

@GetMapping("/jobs")
public List<JobDto> getJobsByType(@RequestParam JobType jobType) {
    // jobType will be automatically mapped
    return jobService.getJobsByType(jobType);
}
URL: /jobs?jobType=PART_TIME ‚Üí Will automatically convert into JobType.PART_TIME

‚úÖ As @PathVariable:
java
Copy
Edit
@GetMapping("/jobs/type/{jobType}")
public List<JobDto> getByType(@PathVariable JobType jobType) {
    return jobService.getJobsByType(jobType);
}
URL: /jobs/type/FULL_TIME

5Ô∏è‚É£ üöÄ Bonus: Use Enum in DB with JPA (if using Entity)
java
@Enumerated(EnumType.STRING)
@Column(name = "job_type")
private JobType jobType;
This saves the value like "FULL_TIME" in the DB, not some 0/1/2 int (cleaner + readable üíØ).

‚úÖ Summary of Benefits
Use Case	Enum Power
‚úÖ Safe API validation	Spring auto-converts or you can fallback
‚úÖ Better readability	JobType.FULL_TIME vs raw strings
‚úÖ Metadata support	Add label, hours, salaryRange, etc.
‚úÖ EnumSet/range ops	Filter weekdays/weekends, etc.
‚úÖ Cleaner DB design	EnumType.STRING saves readable values
